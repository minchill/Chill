# ====================================================================
# PH·∫¶N 1: KH·ªûI T·∫†O V√Ä C·∫§U H√åNH C∆† B·∫¢N
# ====================================================================
import discord
from discord.ext import commands
from discord import FFmpegPCMAudio
from gtts import gTTS
import asyncio
import random
import time
import json
import os

# C·∫•u h√¨nh Intents
intents = discord.Intents.default()
intents.message_content = True 

# Kh·ªüi t·∫°o Bot v√† Ti·ªÅn t·ªë
bot = commands.Bot(command_prefix="b", intents=intents, help_command=None)

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ data
FILE_USERS = "users_data.json"
FILE_GLOBAL = "global_data.json"
users = {}
global_data = {}
anime_list = [] # Config Anime t·ª´ Railway
custom_graphics = {} # Config ƒê·ªì h·ªça t·ª´ Railway

# TOKEN c·ªßa Bot - L·∫§Y T·ª™ BI·∫æN M√îI TR∆Ø·ªúNG HO·∫∂C ƒêI·ªÄN V√ÄO ƒê√ÇY!
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN") or "YOUR_DISCORD_TOKEN_HERE" 
# ====================================================================
# PH·∫¶N 2: C·∫§U H√åNH DATA V√Ä H√ÄM TR·ª¢ GI√öP
# ====================================================================

# --- C·∫§U H√åNH ITEMS (ID S·ªê 001 - 499) ---

# 1. CONSUMABLES (001 - 099)
CONSUMABLES_ITEMS = {
    "001": {"name": "üéÅ H·ªôp qu√†", "price": 500, "sell_price": 250, "desc": "M·ªü ra ph·∫ßn th∆∞·ªüng ng·∫´u nhi√™n."},
    "002": {"name": "üíé ƒê√° qu√Ω", "price": 2000, "sell_price": 1000, "desc": "Nguy√™n li·ªáu n√¢ng c·∫•p."},
    "003": {"name": "üíé R∆∞∆°ng ƒê√° Th·∫ßn", "price": 0, "sell_price": 500, "desc": "M·ªü ra 1 lo·∫°i ƒê√° Buff ng·∫´u nhi√™n."}, 
    "004": {"name": "üé´ L∆∞·ª£t Boss Th√™m", "price": 500, "sell_price": 250, "desc": "C·∫•p th√™m 1 l∆∞·ª£t sƒÉn Boss/Hunt."},
    "005": {"name": "üéüÔ∏è V√© EXP Pet", "price": 300, "sell_price": 150, "desc": "TƒÉng 50 EXP ngay l·∫≠p t·ª©c cho Pet."},
}

# 2. PET ITEMS (100 - 199)
PET_ITEMS = {
    "101": {"name": "üêæ Pet ng·∫´u nhi√™n", "price": 1000, "sell_price": 500, "desc": "Nh·∫≠n m·ªôt Pet ng·∫´u nhi√™n."},
    "102": {"name": "üçñ Th·ª©c ƒÉn", "price": 100, "sell_price": 50, "desc": "TƒÉng EXP cho Pet."},
    "103": {"name": "üß™ N∆∞·ªõc T·∫©y LT", "price": 10000, "sell_price": 5000, "desc": "G·ª° Pet kh·ªèi ng∆∞·ªùi d√πng, bi·∫øn Pet th√†nh item Pet ng·∫´u nhi√™n (101)."},
}

# 3. EQUIPMENT ITEMS (200 - 299)
PERMANENT_EQUIPMENT = {
    "201": {"name": "‚öîÔ∏è Ki·∫øm G·ªó", "price": 300, "sell_price": 150, "bonus": {"atk": 1}, "slot": "weapon", "desc": "+1 ATK."},
    "202": {"name": "üõ°Ô∏è Khi√™n S·∫Øt", "price": 400, "sell_price": 200, "bonus": {"hp": 5}, "slot": "armor", "desc": "+5 HP."},
    "203": {"name": "üîÆ Ng·ªçc TƒÉng T·ªëc", "price": 600, "sell_price": 300, "bonus": {"speed": 2}, "slot": "accessory", "desc": "+2 SPD."},
    "204": {"name": "üíé Ng·ªçc S·ª©c M·∫°nh", "price": 800, "sell_price": 400, "bonus": {"atk": 2}, "slot": "accessory", "desc": "+2 ATK."},
    "205": {"name": "üçÄ T·ª© Di·ªáp Th·∫£o", "price": 1000, "sell_price": 500, "bonus": {"luck": 10}, "slot": "accessory", "desc": "+10 LUCK."},
    "206": {"name": "üí® Gi√†y N√© ƒê√≤n", "price": 1200, "sell_price": 600, "bonus": {"dodge": 5}, "slot": "armor", "desc": "+5 Dodge."},
}

# 4. BUFF ITEMS (300 - 399) - ƒêA C·∫§P ƒê·ªò
HUNT_BUFFS = {
    "301": {"name": "ƒê√° T·ªâ L·ªá (Minor)", "price": 1500, "sell_price": 750, "type": "loot_rate", "value": 1.2, "duration": 900, "desc": "T·ªâ l·ªá r∆°i ƒë·ªì tƒÉng x1.2 trong 15 ph√∫t."},
    "302": {"name": "ƒê√° T·ªâ L·ªá (Standard)", "price": 3000, "sell_price": 1500, "type": "loot_rate", "value": 1.5, "duration": 3600, "desc": "T·ªâ l·ªá r∆°i ƒë·ªì tƒÉng x1.5 trong 1 gi·ªù."},
    "303": {"name": "ƒê√° T·ªâ L·ªá (Major)", "price": 8000, "sell_price": 4000, "type": "loot_rate", "value": 2.0, "duration": 10800, "desc": "T·ªâ l·ªá r∆°i ƒë·ªì tƒÉng x2.0 trong 3 gi·ªù."},
    "304": {"name": "ƒê√° Nh√¢n EXP (Minor)", "price": 1500, "sell_price": 750, "type": "exp_rate", "value": 1.5, "duration": 900, "desc": "EXP Pet nh·∫≠n ƒë∆∞·ª£c tƒÉng x1.5 trong 15 ph√∫t."},
    "305": {"name": "ƒê√° Nh√¢n EXP (Standard)", "price": 3000, "sell_price": 1500, "type": "exp_rate", "value": 2.0, "duration": 3600, "desc": "EXP Pet nh·∫≠n ƒë∆∞·ª£c tƒÉng x2.0 trong 1 gi·ªù."},
    "306": {"name": "ƒê√° Nh√¢n EXP (Major)", "price": 8000, "sell_price": 4000, "type": "exp_rate", "value": 3.0, "duration": 10800, "desc": "EXP Pet nh·∫≠n ƒë∆∞·ª£c tƒÉng x3.0 trong 3 gi·ªù."},
    "307": {"name": "ƒê√° May M·∫Øn (Standard)", "price": 2500, "sell_price": 1250, "type": "luck_rate", "value": 1.5, "duration": 3600, "desc": "T·ªâ l·ªá th·∫Øng boss tƒÉng x1.5 trong 1 gi·ªù."},
    "308": {"name": "ƒê√° May M·∫Øn (Major)", "price": 6000, "sell_price": 3000, "type": "luck_rate", "value": 2.0, "duration": 7200, "desc": "T·ªâ l·ªá th·∫Øng boss tƒÉng x2.0 trong 2 gi·ªù."},
}

# 5. RING ITEMS (400 - 499)
RING_SHOP = {
    "401": {"name": "Nh·∫´n ƒê·ªìng", "cost": 50000, "emoji": "üíç", "ring_img_key": "basic_ring_img"},
    "402": {"name": "Nh·∫´n B·∫°c", "cost": 250000, "emoji": "üíç", "ring_img_key": "silver_ring_img"},
    "403": {"name": "Nh·∫´n Kim C∆∞∆°ng", "cost": 1000000, "emoji": "üíé", "ring_img_key": "diamond_ring_img"},
}

# H·ª£p nh·∫•t t·∫•t c·∫£ Item v√†o m·ªôt Dict l·ªõn ƒë·ªÉ tra c·ª©u nhanh (tr·ª´ Ring Shop)
ALL_SHOP_ITEMS = {**CONSUMABLES_ITEMS, **PET_ITEMS, **PERMANENT_EQUIPMENT, **HUNT_BUFFS}


# --- C·∫§U H√åNH C√ÅC SHOP V√Ä T√äN L·ªÜNH ---
SHOP_CONFIGS = {
    "shop": {
        "title": "üí∞ C·ª≠a H√†ng Ti·ªÅn T·ªá (Shop)", 
        "color": 0x33FF66, 
        "items": ["001", "002", "004", "005"] 
    },
    "petshop": {
        "title": "üêæ C·ª≠a H√†ng V·∫≠t Nu√¥i (Pet Shop)", 
        "color": 0x9966FF, 
        "items": ["101", "102", "103"] 
    },
    "equipshop": {
        "title": "‚öîÔ∏è C·ª≠a H√†ng Trang B·ªã (Equipment Shop)", 
        "color": 0xFF9933, 
        "items": ["201", "202", "203", "204", "205", "206"] 
    },
    "buffshop": {
        "title": "‚ú® C·ª≠a H√†ng Buff (Buff Shop)", 
        "color": 0x33CCFF, 
        "items": ["301", "302", "303", "304", "305", "306", "307", "308"] 
    },
}

# --- PET V√Ä RARITY CONFIGS ---
PET_RARITIES = {
    "Common": {"rate": 60, "name": "Th∆∞·ªùng"},
    "Uncommon": {"rate": 25, "name": "Hi·∫øm"},
    "Rare": {"rate": 10, "name": "R·∫•t Hi·∫øm"},
    "Epic": {"rate": 4, "name": "S·ª≠ Thi"},
    "Legendary": {"rate": 1, "name": "Huy·ªÅn Tho·∫°i"},
}
PET_CONFIGS = {
    "MeoMeo": {"hp": 15, "atk": 3, "speed": 10, "rarity": "Common"},
    "GauGau": {"hp": 20, "atk": 2, "speed": 8, "rarity": "Uncommon"},
    "ThoNgoc": {"hp": 12, "atk": 4, "speed": 12, "rarity": "Rare"},
    "RongLua": {"hp": 30, "atk": 5, "speed": 5, "rarity": "Epic"},
    "Phoenix": {"hp": 40, "atk": 8, "speed": 15, "rarity": "Legendary"},
    "DauDat": {"hp": 10, "atk": 1, "speed": 1, "rarity": "Common"},
}


# --- GIF V√Ä BACKGROUND ANIME ---
DEFAULT_IMAGE_LINKS = {
    "profile_bg": "https://i.pinimg.com/originals/1f/2a/3c/1f2a3c30d3d520869d80d2d3c907d88c.jpg", 
    "propose_gif": "https://i.gifer.com/S6eA.gif",           
    "accept_gif": "https://i.gifer.com/C9zR.gif",            
    "hit_gif": "https://i.gifer.com/K1U.gif",                
    "hug_gif": "https://i.gifer.com/8Qj9.gif",               
    "kiss_gif": "https://i.gifer.com/97yX.gif",              
    "pat_gif": "https://i.gifer.com/I6Pj.gif",               
    "slap_gif": "https://i.gifer.com/95oE.gif",              
    "cuddle_gif": "https://i.gifer.com/L1dF.gif",            
    "poke_gif": "https://i.gifer.com/5J3c.gif",              
    "default_interact_gif": "https://i.gifer.com/7s1H.gif",  
    "basic_ring_img": "https://i.gifer.com/YwN.gif",          
    "silver_ring_img": "https://i.gifer.com/H66I.gif",        
    "diamond_ring_img": "https://i.gifer.com/origin/26/26e6d5e160e1d1f7e0344d5c192f4476.gif", 
}


# --- H√ÄM QU·∫¢N L√ù DATA V√Ä T√çCH H·ª¢P RAILWAY ---
def load_data():
    global users, global_data, anime_list, custom_graphics
    if os.path.exists(FILE_USERS):
        with open(FILE_USERS, 'r') as f:
            users = json.load(f)
    if os.path.exists(FILE_GLOBAL):
        with open(FILE_GLOBAL, 'r') as f:
            global_data = json.load(f)
    
    # T√çCH H·ª¢P 1: ADMIN_IDS T·ª™ RAILWAY
    admin_env = os.getenv("ADMIN_IDS")
    if admin_env:
        admin_list = [id.strip() for id in admin_env.split(',') if id.strip()]
        global_data["admin_list"] = admin_list
    elif "admin_list" not in global_data:
        print("C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng ADMIN_IDS. S·ª≠ d·ª•ng danh s√°ch Admin tr·ªëng.")
        global_data["admin_list"] = []

    # T√çCH H·ª¢P 2: ANIME_LIST_CONFIG T·ª™ RAILWAY
    anime_config_env = os.getenv("ANIME_LIST_CONFIG")
    if anime_config_env:
        try:
            anime_list = json.loads(anime_config_env)
            print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(anime_list)} Anime t·ª´ Railway.")
        except json.JSONDecodeError:
            print("‚ùå L·ªñI: Bi·∫øn ANIME_LIST_CONFIG kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.")
            anime_list = []
    else:
        anime_list = []

    # T√çCH H·ª¢P 3: CUSTOM_GRAPHICS_CONFIG T·ª™ RAILWAY
    graphics_config_env = os.getenv("CUSTOM_GRAPHICS_CONFIG")
    if graphics_config_env:
        try:
            loaded_graphics = json.loads(graphics_config_env)
            custom_graphics.update(loaded_graphics)
            print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng C·∫•u h√¨nh ƒë·ªì h·ªça t√πy ch·ªânh t·ª´ Railway.")
        except json.JSONDecodeError:
            print("‚ùå L·ªñI: Bi·∫øn CUSTOM_GRAPHICS_CONFIG kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.")
    
    if "last_pet_id" not in global_data:
        global_data["last_pet_id"] = 0
        
def save_data(data_dict):
    if data_dict == users:
        file_name = FILE_USERS
    elif data_dict == global_data:
        file_name = FILE_GLOBAL
    else:
        return
    
    with open(file_name, 'w') as f:
        json.dump(data_dict, f, indent=4)

def get_user(user_id):
    user_id = str(user_id)
    if user_id not in users:
        users[user_id] = {
            "balance": 1000,
            "inventory": [],
            "pets": [],
            "last_daily": 0,
            "boss_runs": 3,
            "buffs": {},
            "married_to": None,
            "ring": None,         
            "custom_bg": None,    
            "custom_gif": None,   
        }
    return users[user_id]

def update_balance(user_id, amount):
    user = get_user(user_id)
    user["balance"] = user.get("balance", 0) + amount
    save_data(users)

def is_admin(user_id):
    return str(user_id) in global_data.get("admin_list", [])

def get_action_image_url(user_data, action_key):
    """L·∫•y URL GIF/·∫¢nh theo th·ª© t·ª± ∆∞u ti√™n."""
    if user_data.get("custom_gif"):
        return user_data["custom_gif"]
    if action_key in DEFAULT_IMAGE_LINKS:
        return DEFAULT_IMAGE_LINKS[action_key]
    return DEFAULT_IMAGE_LINKS.get("default_interact_gif")

def get_random_pet_by_rarity():
    """T·∫°o Pet ng·∫´u nhi√™n d·ª±a tr√™n t·ªâ l·ªá."""
    total_rate = sum(r["rate"] for r in PET_RARITIES.values())
    rand_val = random.randint(1, total_rate)
    cumulative_rate = 0
    selected_rarity = None
    
    for r_name, r_data in PET_RARITIES.items():
        cumulative_rate += r_data["rate"]
        if rand_val <= cumulative_rate:
            selected_rarity = r_name
            break
            
    available_pets = [name for name, config in PET_CONFIGS.items() if config["rarity"] == selected_rarity]
    if not available_pets:
        selected_rarity = "Common" # Fallback
        available_pets = [name for name, config in PET_CONFIGS.items() if config["rarity"] == "Common"]

    pet_name = random.choice(available_pets)
    return pet_name, selected_rarity
# ====================================================================
# PH·∫¶N 3: L·ªÜNH KINH T·∫æ V√Ä SHOP
# ====================================================================

@bot.command(name="balance", aliases=["bal", "money", "Bal", "Money"])
async def balance_cmd(ctx, member: discord.Member = None):
    # Logic c≈©
    member = member or ctx.author
    user = get_user(member.id)
    await ctx.send(f"üí∏ **{member.display_name}** hi·ªán c√≥ **{user['balance']:,} xu**.")

@bot.command(name="daily", aliases=["Daily"])
async def daily_cmd(ctx):
    # Logic c≈©
    uid = str(ctx.author.id)
    user = get_user(uid)
    cooldown = 24 * 3600 # 24 gi·ªù
    
    if time.time() - user["last_daily"] >= cooldown:
        reward = 500
        update_balance(uid, reward)
        user["last_daily"] = time.time()
        save_data(users)
        await ctx.send(f"‚úÖ **{ctx.author.display_name}** ƒë√£ nh·∫≠n **{reward:,} xu** h√†ng ng√†y!")
    else:
        remaining = int(cooldown - (time.time() - user["last_daily"]))
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        await ctx.send(f"‚è≥ B·∫°n ph·∫£i ch·ªù th√™m **{hours} gi·ªù {minutes} ph√∫t** n·ªØa ƒë·ªÉ nh·∫≠n qu√† h√†ng ng√†y.")

@bot.command(name="shop", aliases=["s", "bshop", "bpetshop", "bequipshop", "bbuffshop", 
                                  "S", "Bshop", "Bpetshop", "Bequipshop", "Bbuffshop"]) 
async def shop_cmd(ctx):
    """Hi·ªÉn th·ªã c√°c c·ª≠a h√†ng d·ª±a tr√™n l·ªánh g·ªçi (bshop, bpetshop, etc.)."""
    
    command_name = ctx.invoked_with
    if command_name.startswith('b'):
        command_name = command_name[1:]

    # --- HI·ªÇN TH·ªä DANH M·ª§C SHOP (N·∫øu ng∆∞·ªùi d√πng ch·ªâ g√µ bshop/bs) ---
    if command_name in ["shop", "s"]:
        embed = discord.Embed(
            title="üõí Danh M·ª•c C·ª≠a H√†ng Anime",
            description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi ch·ª£ ƒëen Anime! D√πng prefix 'b' + t√™n shop ƒë·ªÉ m·ªü (V√≠ d·ª•: `bpetshop`)",
            color=0xDDDDDD
        )
        for key, config in SHOP_CONFIGS.items():
            embed.add_field(name=config['title'], value=f"**L·ªánh:** `b{key}`", inline=True)
        
        embed.set_thumbnail(url=DEFAULT_IMAGE_LINKS.get("default_interact_gif")) 
        return await ctx.send(embed=embed)

    shop_config = SHOP_CONFIGS.get(command_name)
    if not shop_config:
        return await ctx.send("‚ùå C·ª≠a h√†ng kh√¥ng t·ªìn t·∫°i.")

    # --- HI·ªÇN TH·ªä CHI TI·∫æT SHOP (ƒê√É L√ÄM ƒê·∫∏P) ---
    shop_embed = discord.Embed(
        title=shop_config['title'],
        description=f"S·ª≠ d·ª•ng: `bbuy <ID> [s·ªë l∆∞·ª£ng]` | V√≠ d·ª•: `bbuy {shop_config['items'][0]}`",
        color=shop_config['color']
    )
    
    if command_name == "petshop":
         shop_embed.set_thumbnail(url="https://i.gifer.com/P0b.gif") 
    elif command_name == "equipshop":
         shop_embed.set_thumbnail(url="https://i.gifer.com/7YfL.gif") 
    
    item_source = ALL_SHOP_ITEMS 

    for item_id in shop_config["items"]:
        item = item_source.get(item_id)
        if item:
            price = f"{item['price']:,} xu"
            name = item['name']
            desc = item['desc']
            
            shop_embed.add_field(
                name=f"[{item_id}] **{name}**",
                value=f"`Gi√°:` **{price}**\n*M√¥ t·∫£: {desc}*",
                inline=False 
            )
            
    await ctx.send(embed=shop_embed)

@bot.command(name="buy", aliases=["Buy"])
async def buy_cmd(ctx, item_id: str = None, count: int = 1):
    """Mua v·∫≠t ph·∫©m b·∫±ng ID (001-499)."""
    if item_id is None or count <= 0:
        return await ctx.send("‚ùå C√∫ ph√°p: `bbuy <ID> [s·ªë l∆∞·ª£ng]`")

    item_id = item_id.zfill(3) # ƒê·∫£m b·∫£o ID l√† 3 ch·ªØ s·ªë
    item_data = ALL_SHOP_ITEMS.get(item_id)
    
    if not item_data:
        return await ctx.send("‚ùå ID v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ trong c·ª≠a h√†ng.")

    user = get_user(ctx.author.id)
    cost = item_data["price"] * count

    if user["balance"] < cost:
        return await ctx.send(f"‚ùå B·∫°n kh√¥ng ƒë·ªß **{cost:,} xu** ƒë·ªÉ mua {count}x {item_data['name']}.")

    # Tr·ª´ ti·ªÅn
    update_balance(ctx.author.id, -cost)

    # Th√™m v√†o t√∫i ƒë·ªì
    new_items = []
    for _ in range(count):
        unique_id = str(time.time()) + str(random.randint(100, 999))
        new_items.append({
            "shop_id": item_id,
            "name": item_data["name"],
            "unique_id": unique_id,
        })
    
    user["inventory"].extend(new_items)
    save_data(users)

    await ctx.send(f"‚úÖ **{ctx.author.display_name}** ƒë√£ mua th√†nh c√¥ng **{count}x {item_data['name']}** v·ªõi gi√° **{cost:,} xu**!")


@bot.command(name="sell", aliases=["Sell"])
async def sell_cmd(ctx, shop_id: str = None, count: int = 1):
    """B√°n v·∫≠t ph·∫©m (d√πng ID 3 ch·ªØ s·ªë)."""
    if shop_id is None or count <= 0:
        return await ctx.send("‚ùå C√∫ ph√°p: `bsell <ID> [s·ªë l∆∞·ª£ng]`")
    
    shop_id = shop_id.zfill(3)
    item_data = ALL_SHOP_ITEMS.get(shop_id)

    if not item_data or item_data.get("sell_price") is None or item_data.get("sell_price") == 0:
        return await ctx.send("‚ùå ID v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ b√°n.")

    user = get_user(ctx.author.id)
    
    # ƒê·∫øm s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m trong t√∫i ƒë·ªì
    items_in_inv = [item for item in user["inventory"] if item.get("shop_id") == shop_id]
    
    if len(items_in_inv) < count:
        return await ctx.send(f"‚ùå B·∫°n ch·ªâ c√≥ **{len(items_in_inv)}x** {item_data['name']} trong t√∫i.")
        
    # X√≥a v·∫≠t ph·∫©m kh·ªèi t√∫i ƒë·ªì
    for _ in range(count):
        # T√¨m v√† x√≥a item ƒë·∫ßu ti√™n c√≥ shop_id t∆∞∆°ng ·ª©ng
        item_to_remove = next((item for item in user["inventory"] if item.get("shop_id") == shop_id), None)
        if item_to_remove:
            user["inventory"].remove(item_to_remove)
            
    # T√≠nh ti·ªÅn v√† c·ªông v√†o balance
    total_sell_price = item_data["sell_price"] * count
    update_balance(ctx.author.id, total_sell_price)
    save_data(users)
    
    await ctx.send(f"‚úÖ ƒê√£ b√°n th√†nh c√¥ng **{count}x {item_data['name']}** v·ªõi gi√° **{total_sell_price:,} xu**!")


@bot.command(name="ringshop", aliases=["rshop", "Ringshop", "Rshop"]) 
async def ring_shop_cmd(ctx):
    # Logic c≈© + c·∫≠p nh·∫≠t ID
    shop_embed = discord.Embed(
        title="üíç C·ª≠a H√†ng Nh·∫´n C∆∞·ªõi Anime",
        description="Mua nh·∫´n ƒë·ªÉ c·∫ßu h√¥n. (Ch·ªâ c·∫ßn mua 1 l·∫ßn)",
        color=discord.Color.gold()
    )
    shop_embed.set_thumbnail(url=DEFAULT_IMAGE_LINKS.get(RING_SHOP['403']['ring_img_key']))

    for item_id, item_data in RING_SHOP.items():
        name = item_data['name']
        cost = f"{item_data['cost']:,} xu"
        emoji = item_data['emoji']
        shop_embed.add_field(
            name=f"{emoji} {name} (`{item_id}`)",
            value=f"**Gi√°:** {cost}",
            inline=True
        )
    
    shop_embed.set_footer(text="S·ª≠ d·ª•ng: bbuyring <id_nh·∫´n> | V√≠ d·ª•: bbuyring 403")
    await ctx.send(embed=shop_embed)


@bot.command(name="buyring", aliases=["Buyring"]) 
async def buy_ring_cmd(ctx, item_id: str = None):
    # Logic c≈© + c·∫≠p nh·∫≠t ID
    if item_id is None:
        return await ctx.send("‚ùå C√∫ ph√°p: `bbuyring <id_nh·∫´n>`. D√πng `bringshop` ƒë·ªÉ xem ID.")

    item_id = item_id.zfill(3)
    item_data = RING_SHOP.get(item_id)
    if not item_data:
        return await ctx.send("‚ùå ID nh·∫´n kh√¥ng h·ª£p l·ªá.")

    user = get_user(ctx.author.id)
    cost = item_data["cost"]

    if user["balance"] < cost:
        return await ctx.send(f"‚ùå B·∫°n kh√¥ng ƒë·ªß **{cost:,} xu** ƒë·ªÉ mua {item_data['name']}.")

    if user["ring"] == item_id:
        return await ctx.send(f"‚ùå B·∫°n ƒë√£ s·ªü h·ªØu v√† ƒëang trang b·ªã {item_data['name']} r·ªìi.")
        
    update_balance(ctx.author.id, -cost)
    user["ring"] = item_id
    save_data(users)

    await ctx.send(f"‚úÖ **{ctx.author.display_name}** ƒë√£ mua v√† trang b·ªã th√†nh c√¥ng {item_data['emoji']} **{item_data['name']}** v·ªõi gi√° **{cost:,} xu**!")


@bot.command(name="customshop", aliases=["cshop", "Cshop"]) 
async def custom_shop_cmd(ctx, shop_type: str = None):
    # Logic c≈© + c·∫≠p nh·∫≠t ID (ID 5xx cho Custom Graphics)
    if not custom_graphics:
        return await ctx.send("‚ùå C·ª≠a h√†ng t√πy ch·ªânh hi·ªán ƒëang tr·ªëng.")
        
    shop_type = (shop_type or "all").lower()
    items_to_display = []
    
    # L·∫•y ID 5xx ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng tr√πng
    current_id_counter = 501
    all_graphics_items = []
    
    # T·∫°o danh s√°ch item v·ªõi ID s·ªë 5xx
    for key, items in custom_graphics.items():
        if isinstance(items, list):
            for item in items:
                # G√°n ID s·ªë 3 ch·ªØ s·ªë (501, 502, ...)
                item_id = str(current_id_counter).zfill(3)
                item["id"] = item_id
                all_graphics_items.append(item)
                current_id_counter += 1

    # Ph√¢n lo·∫°i ƒë·ªÉ hi·ªÉn th·ªã
    if shop_type in ["bg", "backgrounds", "all"]:
        items_to_display.extend([i for i in all_graphics_items if 'bg' in i['id'].lower()])
    if shop_type in ["bn", "banners", "all"]:
        items_to_display.extend([i for i in all_graphics_items if 'bn' in i['id'].lower()])
    if shop_type in ["em", "emojis", "all"]:
        items_to_display.extend([i for i in all_graphics_items if 'em' in i['id'].lower()])
        
    if not items_to_display:
        return await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng cho lo·∫°i shop n√†y.")
        
    embed = discord.Embed(
        title=f"üé® C·ª≠a H√†ng ƒê·ªì H·ªça T√πy Ch·ªânh ({shop_type.upper()})",
        description="Mua c√°c m·∫∑t h√†ng n√†y s·∫Ω th√™m ch√∫ng v√†o t√∫i ƒë·ªì (inventory) c·ªßa b·∫°n. ID: 501-599",
        color=discord.Color.blue()
    )
    
    for item in items_to_display:
        item_type = ""
        if item['id'].startswith('50'): item_type = "BG" # V√≠ d·ª•
        elif item['id'].startswith('51'): item_type = "Banner" # V√≠ d·ª•
        
        value_text = f"**Gi√°:** {item.get('price', 0):,} xu\n"
        if item_type == "Emoji":
            value_text += f"**Code:** `{item.get('code', '')}`"
            
        embed.add_field(
            name=f"[{item['id']}] {item['name']}",
            value=value_text,
            inline=True
        )
        
    embed.set_footer(text="S·ª≠ d·ª•ng: bbuycustom <ID_item> | V√≠ d·ª•: bbuycustom 501")
    await ctx.send(embed=embed)


@bot.command(name="buycustom", aliases=["Buycustom"]) 
async def buy_custom_cmd(ctx, item_id: str = None):
    """Mua c√°c v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng ƒë·ªì h·ªça t√πy ch·ªânh (ID 5xx)."""
    if item_id is None:
        return await ctx.send("‚ùå C√∫ ph√°p: `bbuycustom <ID_item>`. D√πng `bcustomshop` ƒë·ªÉ xem ID.")
        
    item_id = item_id.zfill(3)
    item_data = None
    item_type = ""
    
    # Logic t√¨m item t∆∞∆°ng t·ª± nh∆∞ bcustomshop ƒë·ªÉ l·∫•y item_data
    all_graphics_items = []
    current_id_counter = 501
    for key, items in custom_graphics.items():
        if isinstance(items, list):
            for item in items:
                item_id_internal = str(current_id_counter).zfill(3)
                if item_id_internal == item_id:
                    item_data = item
                    item_data["id"] = item_id_internal # G√°n l·∫°i ID
                    item_type = key[:-1] if key.endswith('s') else key
                    break
                current_id_counter += 1
            if item_data: break
                
    if not item_data:
        return await ctx.send("‚ùå ID v·∫≠t ph·∫©m t√πy ch·ªânh kh√¥ng h·ª£p l·ªá.")
        
    user = get_user(ctx.author.id)
    cost = item_data.get("price", 0)
    
    if user["balance"] < cost:
        return await ctx.send(f"‚ùå B·∫°n kh√¥ng ƒë·ªß **{cost:,} xu** ƒë·ªÉ mua {item_data['name']}.")
        
    update_balance(ctx.author.id, -cost)
    
    user["inventory"].append({
        "shop_id": item_id,
        "name": f"[{item_type.title()}] {item_data['name']}",
        "unique_id": str(time.time()) + str(random.randint(100, 999)),
        "data": item_data 
    })
    save_data(users)
    
    await ctx.send(f"‚úÖ **{ctx.author.display_name}** ƒë√£ mua th√†nh c√¥ng **{item_data['name']}** ({item_id}) v·ªõi gi√° **{cost:,} xu**!")
  # ====================================================================
# PH·∫¶N 4: L·ªÜNH T√öI ƒê·ªí V√Ä S·ª¨ D·ª§NG ITEM
# ====================================================================

@bot.command(name="inv", aliases=["items", "Inv", "Items"]) 
async def inv_cmd(ctx):
    """Hi·ªÉn th·ªã T√∫i ƒë·ªì (Inventory) c·ªßa ng∆∞·ªùi d√πng (ƒê√É L√ÄM ƒê·∫∏P)."""
    uid = str(ctx.author.id)
    user = get_user(uid)
    
    inv_embed = discord.Embed(
        title=f"üéí T√∫i ƒê·ªì c·ªßa {ctx.author.display_name}",
        description=f"T·ªïng s·ªë d∆∞: **{user['balance']:,} xu**",
        color=0x00BFFF 
    )
    inv_embed.set_thumbnail(url=ctx.author.display_avatar.url)
    
    # --- 1. PH√ÇN LO·∫†I V·∫¨T PH·∫®M ---
    item_counts = {}
    equipment = []
    custom_items = []
    
    for item in user.get("inventory", []):
        shop_id = item.get("shop_id")
        unique_id = item.get("unique_id")
        
        if shop_id.startswith("2"): # 2xx: Equipment
            is_equipped = False
            for pet in user.get("pets", []):
                if pet.get("equipped_item") == unique_id:
                    is_equipped = True
                    break
            equipment.append((item, is_equipped))
        elif shop_id.startswith("5"): # 5xx: Custom Graphics
            custom_items.append(item)
        else:
            item_counts[shop_id] = item_counts.get(shop_id, 0) + 1

    # --- 2. FIELD: V·∫¨T PH·∫®M TI√äU TH·ª§ (Consumables & Pet Items & Buffs) ---
    consumable_text = ""
    for shop_id, count in item_counts.items():
        item_data = ALL_SHOP_ITEMS.get(shop_id, {"name": "Item Kh√¥ng r√µ"})
        item_name = item_data['name']
        consumable_text += f"`[{shop_id}]` **{item_name}** x{count}\n"
        
    if consumable_text:
        inv_embed.add_field(name="üì¶ V·∫≠t Ph·∫©m Ti√™u Th·ª• (D√πng: `buse <ID>`)", 
                            value=consumable_text, 
                            inline=False)
    else:
        inv_embed.add_field(name="üì¶ V·∫≠t Ph·∫©m Ti√™u Th·ª•", 
                            value="*Kho ch·ª©a tr·ªëng r·ªóng...*", 
                            inline=False)

    # --- 3. FIELD: TRANG B·ªä (Equipment - 2xx) ---
    equip_text = ""
    for item, is_equipped in equipment:
        status = " (‚úÖ ƒê√£ Trang B·ªã)" if is_equipped else " (‚ùå Ch∆∞a Trang B·ªã)"
        equip_text += f"`[{item['shop_id']}]` **{item['name']}** - ID: `{item['unique_id'][:6]}`{status}\n"
    
    if equip_text:
        inv_embed.add_field(name="‚öîÔ∏è Trang B·ªã (Equip: `bequip <ID_6_s·ªë> <Pet_ID>`)", 
                            value=equip_text, 
                            inline=False)
    else:
        inv_embed.add_field(name="‚öîÔ∏è Trang B·ªã", 
                            value="*Ch∆∞a c√≥ trang b·ªã n√†o...*", 
                            inline=False)

    # --- 4. FIELD: ƒê·ªí H·ªåA T√ôY CH·ªàNH (Custom Graphics - 5xx) ---
    custom_text = ""
    custom_counts = {}
    for item in custom_items:
        custom_counts[item['shop_id']] = custom_counts.get(item['shop_id'], 0) + 1
        
    for shop_id, count in custom_counts.items():
        # L·∫•y t√™n item t√πy ch·ªânh (ƒê√¢y l√† m·ªôt c√°ch ƒë∆°n gi·∫£n, n·∫øu b·∫°n mu·ªën t√™n ƒë·∫πp h∆°n, c·∫ßn logic t√¨m item t·ª´ custom_graphics)
        item_name = item.get("name", "Custom Item")
        custom_text += f"`[{shop_id}]` **{item_name}** x{count}\n"

    if custom_text:
        inv_embed.add_field(name="üé® ƒê·ªì H·ªça (Set: `bsetbg/bsetgif <URL>`)", 
                            value=custom_text, 
                            inline=False)

    # --- 5. FIELD: BUFF HI·ªÜN T·∫†I ---
    buff_text = ""
    current_time = time.time()
    if user.get("buffs"):
        for buff_type, buff_data in user["buffs"].items():
            if buff_data["end_time"] > current_time:
                remaining_time = int(buff_data["end_time"] - current_time)
                name_map = {"loot_rate": "T·ªâ L·ªá R∆°i ƒê·ªì", "exp_rate": "Nh√¢n EXP Pet", "luck_rate": "May M·∫Øn Boss"}
                buff_name = name_map.get(buff_type, buff_type.title())
                duration_display = f"{remaining_time // 3600} gi·ªù {(remaining_time % 3600) // 60} ph√∫t"
                
                buff_text += f"‚ö° **{buff_name}** (x{buff_data['value']})\n"
                buff_text += f"   *C√≤n l·∫°i:* **{duration_display}**\n"
    
    if buff_text:
        inv_embed.add_field(name="‚ú® Buff ƒêang K√≠ch Ho·∫°t", 
                            value=buff_text, 
                            inline=False)

    inv_embed.set_footer(text="ID 6 ch·ªØ s·ªë: unique_id c·ªßa Trang b·ªã (D√πng ƒë·ªÉ Equip/Unequip)")
    await ctx.send(embed=inv_embed)


@bot.command(name="use", aliases=["Use"]) 
async def use_cmd(ctx, shop_id: str = None, pet_id: int = None):
    """S·ª≠ d·ª•ng v·∫≠t ph·∫©m (ID 3 ch·ªØ s·ªë)."""
    if shop_id is None:
        return await ctx.send("‚ùå C√∫ ph√°p: `buse <ID> [Pet_ID]`")
        
    shop_id = shop_id.zfill(3)
    user = get_user(ctx.author.id)
    item_entry = next((item for item in user["inventory"] if item.get("shop_id") == shop_id), None)

    if not item_entry:
        return await ctx.send(f"‚ùå B·∫°n kh√¥ng c√≥ v·∫≠t ph·∫©m v·ªõi ID `{shop_id}` trong t√∫i.")
        
    item_name = item_entry['name']
    item_data = ALL_SHOP_ITEMS.get(shop_id, {})
    
    # X√≥a item kh·ªèi t√∫i ƒë·ªì (tr·ª´ khi l√† item c·∫ßn gi·ªØ l·∫°i)
    user["inventory"].remove(item_entry) 
    res = ""
    
    # 1. BUFFS (3xx)
    if shop_id.startswith("3"): 
        if item_data["type"] not in ["loot_rate", "exp_rate", "luck_rate"]:
            res = f"‚ùå Kh√¥ng th·ªÉ s·ª≠ d·ª•ng v·∫≠t ph·∫©m buff kh√¥ng x√°c ƒë·ªãnh n√†y."
        else:
            buff_type = item_data["type"]
            buff_value = item_data["value"]
            duration = item_data["duration"]
            current_time = time.time()
            
            user["buffs"][buff_type] = {
                "value": buff_value,
                "end_time": current_time + duration
            }
            duration_display = f"{duration // 3600} gi·ªù" if duration % 3600 == 0 else f"{duration // 60} ph√∫t"
            res = f"‚ú® ƒê√£ k√≠ch ho·∫°t **{item_name}**! **{item_data['desc'].split(' trong ')[0]}** trong **{duration_display}**."
            
    # 2. PET ITEMS (1xx)
    elif shop_id == "101": # Pet ng·∫´u nhi√™n (ch·ªâ l√† item, ph·∫£i d√πng brollpet)
        user["inventory"].append(item_entry) # Ho√†n tr·∫£ l·∫°i item ƒë√£ b·ªã x√≥a
        return await ctx.send(f"‚ùå Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `brollpet` ƒë·ªÉ m·ªü **{item_name}**.")
    
    elif shop_id == "103": # N∆∞·ªõc T·∫©y LT
        if pet_id is None or pet_id <= 0: return await ctx.send("‚ùå C√∫ ph√°p: `buse 103 <Pet_ID>`")
        
        target_pet = next((p for p in user["pets"] if p.get("id") == pet_id), None)
        if not target_pet: return await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y Pet v·ªõi ID **{pet_id}**.")
        
        user["pets"].remove(target_pet)
        
        # T·∫°o l·∫°i item Pet ng·∫´u nhi√™n (101) v√† th√™m v√†o t√∫i
        pet_item_data = ALL_SHOP_ITEMS["101"]
        user["inventory"].append({"shop_id": "101", "name": pet_item_data["name"], "unique_id": str(time.time()) + str(random.randint(100, 999))})
        res = f"üß™ ƒê√£ s·ª≠ d·ª•ng **{item_name}**. Pet **{target_pet['name']}** ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè v√† b·∫°n nh·∫≠n l·∫°i **1x {pet_item_data['name']}**."

    # 3. CONSUMABLES (0xx)
    elif shop_id == "004": # L∆∞·ª£t Boss Th√™m
        user["boss_runs"] = user.get("boss_runs", 0) + 1
        res = f"üé´ ƒê√£ s·ª≠ d·ª•ng **{item_name}**. B·∫°n nh·∫≠n th√™m **1 l∆∞·ª£t** sƒÉn Boss/Hunt. T·ªïng l∆∞·ª£t hi·ªán c√≥: **{user['boss_runs']}**."
        
    elif shop_id == "005": # V√© EXP Pet
        if pet_id is None or pet_id <= 0: return await ctx.send("‚ùå C√∫ ph√°p: `buse 005 <Pet_ID>`")
        
        target_pet = next((p for p in user["pets"] if p.get("id") == pet_id), None)
        if not target_pet: return await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y Pet v·ªõi ID **{pet_id}**.")
        
        exp_gain = 50
        target_pet["exp"] += exp_gain
        # (Th√™m logic Level Up n·∫øu c·∫ßn)
        res = f"üéüÔ∏è Pet **{target_pet['name']}** nh·∫≠n ƒë∆∞·ª£c **{exp_gain} EXP**! T·ªïng EXP hi·ªán t·∫°i: {target_pet['exp']}."

    # 4. C√ÅC ITEMS KH√ÅC (C·∫ßn gi·ªØ l·∫°i n·∫øu item kh√¥ng b·ªã x√≥a)
    else:
        # Trong tr∆∞·ªùng h·ª£p item kh√¥ng c√≥ logic s·ª≠ d·ª•ng ·ªü ƒë√¢y, tr·∫£ l·∫°i item
        user["inventory"].append(item_entry)
        res = f"‚ùå V·∫≠t ph·∫©m **{item_name}** kh√¥ng th·ªÉ s·ª≠ d·ª•ng b·∫±ng l·ªánh `buse` ho·∫∑c ch∆∞a c√≥ logic x·ª≠ l√Ω."
    
    save_data(users)
    await ctx.send(res)


@bot.command(name="equip", aliases=["Equip"])
async def equip_cmd(ctx, unique_id: str = None, pet_id: int = None):
    """Trang b·ªã v·∫≠t ph·∫©m (ID 6 s·ªë) cho Pet (ID s·ªë)."""
    # Logic c≈©
    if unique_id is None or pet_id is None:
        return await ctx.send("‚ùå C√∫ ph√°p: `bequip <ID_6_s·ªë> <Pet_ID>`.")
    
    user = get_user(ctx.author.id)
    
    # 1. T√¨m Trang b·ªã trong t√∫i ƒë·ªì
    item_to_equip = next((item for item in user["inventory"] if item.get("unique_id", "")[:6] == unique_id), None)
    if not item_to_equip:
        return await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y Trang b·ªã v·ªõi ID `{unique_id}`.")
        
    item_data = ALL_SHOP_ITEMS.get(item_to_equip["shop_id"])
    if not item_data or item_to_equip["shop_id"] not in PERMANENT_EQUIPMENT:
        return await ctx.send(f"‚ùå V·∫≠t ph·∫©m `{item_to_equip['name']}` kh√¥ng ph·∫£i l√† trang b·ªã.")

    # 2. T√¨m Pet
    target_pet = next((p for p in user["pets"] if p.get("id") == pet_id), None)
    if not target_pet:
        return await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y Pet v·ªõi ID **{pet_id}**.")
        
    # 3. Trang b·ªã (Logic ch·ªâ cho ph√©p 1 m√≥n)
    if target_pet.get("equipped_item") == item_to_equip["unique_id"]:
        return await ctx.send(f"‚ùå Trang b·ªã n√†y ƒë√£ ƒë∆∞·ª£c g·∫Øn cho Pet **{target_pet['name']}**.")
        
    # G·ª° m√≥n ƒë·ªì c≈© n·∫øu c√≥
    old_item_unique_id = target_pet.get("equipped_item")
    if old_item_unique_id:
        old_item = next((item for item in user["inventory"] if item.get("unique_id") == old_item_unique_id), None)
        if old_item:
            await ctx.send(f"‚ö†Ô∏è ƒê√£ g·ª° **{old_item['name']}** kh·ªèi Pet **{target_pet['name']}**.")
    
    target_pet["equipped_item"] = item_to_equip["unique_id"]
    save_data(users)
    await ctx.send(f"‚úÖ ƒê√£ trang b·ªã **{item_to_equip['name']}** cho Pet **{target_pet['name']}**!")


@bot.command(name="unequip", aliases=["un", "Unequip", "Un"])
async def unequip_cmd(ctx, pet_id: int = None):
    """G·ª° trang b·ªã kh·ªèi Pet (D√πng Pet ID)."""
    # Logic c≈©
    if pet_id is None:
        return await ctx.send("‚ùå C√∫ ph√°p: `bunequip <Pet_ID>`.")
        
    user = get_user(ctx.author.id)
    target_pet = next((p for p in user["pets"] if p.get("id") == pet_id), None)
    
    if not target_pet:
        return await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y Pet v·ªõi ID **{pet_id}**.")
        
    equipped_unique_id = target_pet.get("equipped_item")
    if not equipped_unique_id:
        return await ctx.send(f"‚ùå Pet **{target_pet['name']}** kh√¥ng c√≥ trang b·ªã n√†o.")
        
    # T√¨m th√¥ng tin item ƒë·ªÉ hi·ªÉn th·ªã t√™n
    equipped_item = next((item for item in user["inventory"] if item.get("unique_id") == equipped_unique_id), None)
    item_name = equipped_item["name"] if equipped_item else "Trang b·ªã kh√¥ng r√µ"
    
    target_pet["equipped_item"] = None
    save_data(users)
    await ctx.send(f"‚úÖ ƒê√£ g·ª° **{item_name}** kh·ªèi Pet **{target_pet['name']}**.")
                                                                       # ====================================================================
# PH·∫¶N 5: L·ªÜNH PET V√Ä HUNTING
# ====================================================================

@bot.command(name="rollpet", aliases=["rp", "Rollpet", "Rp"])
async def random_pet_cmd(ctx):
    uid = ctx.author.id; user = get_user(uid)
    
    # C·∫≠p nh·∫≠t ID item Pet ng·∫´u nhi√™n t·ª´ 101
    pet_item = next((item for item in user.get("inventory", []) if item.get("shop_id") == "101"), None) 
    if not pet_item: return await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ **üêæ Pet ng·∫´u nhi√™n** (ID: 101) trong t√∫i. D√πng `bbuy 101` ƒë·ªÉ mua.")
    
    user["inventory"].remove(pet_item)
    
    pet_name, rarity_name = get_random_pet_by_rarity() 
    pet_config = PET_CONFIGS[pet_name]
    
    global_data["last_pet_id"] = global_data.get("last_pet_id", 0) + 1
    new_pet_id = global_data["last_pet_id"]
    
    new_pet = {
        "id": new_pet_id,
        "name": pet_name,
        "rarity": rarity_name,
        "level": 1,
        "exp": 0,
        "stats": pet_config,
        "equipped_item": None,
    }
    user["pets"].append(new_pet)
    save_data(users)
    save_data(global_data)

    embed = discord.Embed(
        title=f"üéâ CH√öC M·ª™NG! Pet M·ªõi!",
        description=f"üéâ B·∫°n nh·∫≠n ƒë∆∞·ª£c Pet **{pet_name}** m·ªõi! (Rarity: **{PET_RARITIES[rarity_name]['name']}**)",
        color=0xFF00FF
    )
    embed.add_field(name="ID Pet", value=new_pet_id, inline=True)
    embed.add_field(name="HP/ATK/SPD", value=f"{new_pet['stats']['hp']}/{new_pet['stats']['atk']}/{new_pet['stats']['speed']}", inline=True)
    await ctx.send(embed=embed)


@bot.command(name="pets", aliases=["z", "Pets", "Z"])
async def pets_cmd(ctx):
    # Logic c≈©
    user = get_user(ctx.author.id)
    pets = user.get("pets")
    
    if not pets:
        return await ctx.send("‚ùå B·∫°n ch∆∞a s·ªü h·ªØu Pet n√†o.")
        
    embed = discord.Embed(
        title=f"üêæ B·ªô S∆∞u T·∫≠p Pet c·ªßa {ctx.author.display_name}",
        color=discord.Color.blue()
    )
    
    for pet in pets:
        item_unique_id = pet.get("equipped_item")
        item_name = "Kh√¥ng"
        
        if item_unique_id:
            equipped_item = next((item for item in user["inventory"] if item.get("unique_id") == item_unique_id), None)
            if equipped_item:
                item_name = equipped_item["name"]
        
        stats = pet["stats"]
        name_line = f"[{pet['id']}] **{pet['name']}** (Lv.{pet['level']})"
        info_line = f"HP/ATK/SPD: {stats['hp']}/{stats['atk']}/{stats['speed']}\nEXP: {pet['exp']}\nTrang b·ªã: *{item_name}*"
        
        embed.add_field(name=name_line, value=info_line, inline=True)
        
    await ctx.send(embed=embed)


@bot.command(name="hunt", aliases=["Hunt"])
async def hunt_cmd(ctx):
    # Logic c≈© (S·∫Ω c·∫ßn c·∫≠p nh·∫≠t logic Buff)
    uid = str(ctx.author.id)
    user = get_user(uid)
    
    if user["boss_runs"] <= 0:
        return await ctx.send("‚ùå B·∫°n ƒë√£ h·∫øt l∆∞·ª£t sƒÉn Boss/Hunt. D√πng `bbuy 004` ƒë·ªÉ mua th√™m l∆∞·ª£t.")
        
    if not user["pets"]:
        return await ctx.send("‚ùå B·∫°n c·∫ßn √≠t nh·∫•t m·ªôt Pet ƒë·ªÉ tham gia sƒÉn Boss. D√πng `brollpet`.")

    # 1. T√çNH TO√ÅN BUFFS V√Ä STATS
    current_time = time.time()
    active_buffs = {k: v for k, v in user["buffs"].items() if v["end_time"] > current_time}
    user["buffs"] = active_buffs # C·∫≠p nh·∫≠t x√≥a buff h·∫øt h·∫°n
    
    # √Åp d·ª•ng Luck Buff (307, 308)
    base_win_rate = 0.5
    luck_buff = active_buffs.get("luck_rate", {}).get("value", 1.0)
    final_win_rate = base_win_rate * luck_buff

    # L·∫•y t·ªïng Stats (ƒê∆°n gi·∫£n h√≥a: d√πng Stats c·ªßa Pet m·∫°nh nh·∫•t)
    strongest_pet = max(user["pets"], key=lambda p: p["stats"]["hp"] + p["stats"]["atk"] + p["stats"]["speed"])
    pet_power = strongest_pet["stats"]["hp"] + strongest_pet["stats"]["atk"] + strongest_pet["stats"]["speed"]
    
    # 2. X·ª¨ L√ù K·∫æT QU·∫¢ HUNT
    user["boss_runs"] -= 1
    save_data(users)
    
    # Gi·∫£ ƒë·ªãnh Boss c√≥ ƒë·ªô kh√≥ t∆∞∆°ng ƒë∆∞∆°ng Pet Power (cho ƒë∆°n gi·∫£n)
    
    result_text = f"**{ctx.author.display_name}** v√† Pet **{strongest_pet['name']}** ƒë√£ tham gia sƒÉn Boss!"
    
    if random.random() < final_win_rate: # WIN
        reward_money = random.randint(1000, 3000)
        reward_exp = random.randint(50, 150)
        
        # √Åp d·ª•ng Loot Rate Buff (301, 302, 303)
        loot_buff = active_buffs.get("loot_rate", {}).get("value", 1.0)
        final_reward_money = int(reward_money * loot_buff)
        
        # √Åp d·ª•ng EXP Rate Buff (304, 305, 306)
        exp_buff = active_buffs.get("exp_rate", {}).get("value", 1.0)
        final_reward_exp = int(reward_exp * exp_buff)

        update_balance(uid, final_reward_money)
        strongest_pet["exp"] = strongest_pet.get("exp", 0) + final_reward_exp
        
        res = f"‚úÖ **CHI·∫æN TH·∫ÆNG!** Boss ƒë√£ b·ªã ƒë√°nh b·∫°i!\n"
        res += f"üí∞ Nh·∫≠n ƒë∆∞·ª£c **{final_reward_money:,} xu** (Loot x{loot_buff:.1f})\n"
        res += f"‚ú® Pet **{strongest_pet['name']}** nh·∫≠n ƒë∆∞·ª£c **{final_reward_exp} EXP** (EXP x{exp_buff:.1f})"
    else: # LOSE
        res = f"‚ùå **TH·∫§T B·∫†I!** Boss qu√° m·∫°nh...\n"
        res += f"Pet **{strongest_pet['name']}** kh√¥ng nh·∫≠n ƒë∆∞·ª£c g√¨."
        
    await ctx.send(f"{result_text}\n\n{res}\n\n*L∆∞·ª£t c√≤n l·∫°i:* **{user['boss_runs']}**")
  # ====================================================================
# PH·∫¶N 6: L·ªÜNH T∆Ø∆†NG T√ÅC (SOCIAL & ROLEPLAY) - CODE ƒê√É S·ª¨A L·ªñI
# ====================================================================

SOCIAL_ACTIONS = {
    # Key ph·∫£i l√† ch·ªØ th∆∞·ªùng ƒë·ªÉ kh·ªõp v·ªõi l·ªánh g·ªçi.
    "hit": {"past": "ƒë√°nh", "desc": "ƒë√£ tung c√∫ ƒë·∫•m ch√≠ m·∫°ng v√†o", "emoji": "üí•"}, 
    "hug": {"past": "√¥m", "desc": "ƒë√£ √¥m ch·∫∑t l·∫•y", "emoji": "ü´Ç"}, 
    "kiss": {"past": "h√¥n", "desc": "ƒë√£ t·∫∑ng m·ªôt n·ª• h√¥n e th·∫πn cho", "emoji": "üíñ"}, 
    "pat": {"past": "xoa ƒë·∫ßu", "desc": "ƒë√£ xoa ƒë·∫ßu ƒë·∫ßy c∆∞ng chi·ªÅu", "emoji": "üòä"}, 
    "slap": {"past": "t√°t", "desc": "ƒë√£ t√°t m·ªôt c√°i ƒëau ƒëi·∫øng v√†o", "emoji": "üí¢"}, 
    "cuddle": {"past": "r√∫c v√†o", "desc": "ƒë√£ r√∫c v√†o ng∆∞·ªùi", "emoji": "üíû"}, 
    "poke": {"past": "ch·ªçc", "desc": "ƒë√£ ch·ªçc v√†o m√°", "emoji": "üëâ"}, 
}
MARRIAGE_FEE = 10000

# H√†m tr·ª£ gi√∫p l·∫•y member
async def get_member(ctx, target_str):
    if not target_str:
        return None
    try:
        member_id = int(target_str.strip('<@!>'))
        # ƒê·∫£m b·∫£o l·ªánh ch·∫°y ƒë∆∞·ª£c trong DMs (n·∫øu bot cho ph√©p)
        if ctx.guild:
            return await ctx.guild.fetch_member(member_id)
        else:
            return await bot.fetch_user(member_id)
    except:
        return None

# H√ÄM CALLBACK CHUNG - KH√îNG D√ôNG DECORATOR @bot.command() ·ªû ƒê√ÇY!
async def interact_cmd(ctx, target: str = None): 
    """
    X·ª≠ l√Ω t·∫•t c·∫£ c√°c l·ªánh t∆∞∆°ng t√°c (hug, kiss, hit, etc.).
    Action ƒë∆∞·ª£c l·∫•y t·ª´ t√™n l·ªánh ƒë√£ g·ªçi (ctx.invoked_with).
    """
    
    # L·∫•y t√™n l·ªánh ƒë√£ g·ªçi (hug, kiss, hit, ...) v√† chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
    # V√≠ d·ª•: n·∫øu user g√µ bHUG, ctx.invoked_with l√† HUG.
    invoked_name = ctx.invoked_with.lower()
    
    # X·ª≠ l√Ω c√°c ti·ªÅn t·ªë 'b' (v√≠ d·ª•: bhug -> hug)
    if invoked_name.startswith('b'):
        action_name = invoked_name[1:]
    else:
        action_name = invoked_name
        
    action_data = SOCIAL_ACTIONS.get(action_name)
    
    if not action_data:
        # N·∫øu l·ªánh g·ªçi kh√¥ng ph·∫£i l√† l·ªánh t∆∞∆°ng t√°c (ho·∫∑c kh√¥ng kh·ªõp alias), tho√°t
        return 

    if target is None:
        return await ctx.send(f"‚ùå C√∫ ph√°p: `b{action_name} <@ng∆∞·ªùi d√πng>`.")

    member_target = await get_member(ctx, target)
    if not member_target or member_target.id == ctx.author.id:
        return await ctx.send("‚ùå Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá ho·∫∑c b·∫°n kh√¥ng th·ªÉ t·ª± th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.")

    # L·∫•y URL GIF
    author_data = get_user(ctx.author.id)
    gif_url = get_action_image_url(author_data, f"{action_name}_gif")

    embed = discord.Embed(
        description=f"{action_data['emoji']} **{ctx.author.display_name}** {action_data['desc']} **{member_target.display_name}**!",
        color=discord.Color.red() if action_name in ["hit", "slap"] else discord.Color.green()
    )
    embed.set_image(url=gif_url)
    await ctx.send(embed=embed)


# T·∫°o l·ªánh t∆∞∆°ng t√°c v√† aliases cho t·ª´ng h√†nh ƒë·ªông
for action, data in SOCIAL_ACTIONS.items():
    # Th√™m aliases: hug, √¥m, Hug, √îm
    aliases = [data["past"], action.capitalize(), data["past"].capitalize()]
    
    # G√°n h√†m interact_cmd l√†m callback cho t·ª´ng l·ªánh m·ªõi.
    # L∆ØU √ù: Kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a @bot.command() ngay tr√™n h√†m interact_cmd
    bot.command(name=action, aliases=aliases)(interact_cmd)


# --- C√ÅC L·ªÜNH H√îN NH√ÇN/T√åNH Y√äU ---

@bot.command(name="propose", aliases=["Propose"]) 
async def propose_cmd(ctx, target: str = None):
    # Logic c≈©
    member_target = await get_member(ctx, target)
    if not member_target: return await ctx.send("‚ùå Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.")
    if member_target.id == ctx.author.id: return await ctx.send("‚ùå B·∫°n kh√¥ng th·ªÉ t·ª± c·∫ßu h√¥n ch√≠nh m√¨nh.")

    author_data = get_user(ctx.author.id)
    if author_data["married_to"]: return await ctx.send("‚ùå B·∫°n ƒë√£ k·∫øt h√¥n r·ªìi.")
    if not author_data.get("ring"): return await ctx.send("‚ùå B·∫°n c·∫ßn mua nh·∫´n c∆∞·ªõi (Ring) tr∆∞·ªõc khi c·∫ßu h√¥n! D√πng `bringshop`.")

    embed = discord.Embed(
        title="üíñ L·ªúI C·∫¶U H√îN NG·ªåT NG√ÄO",
        description=f"**{member_target.mention}**, **{ctx.author.display_name}** ƒëang c·∫ßu h√¥n b·∫°n! D√πng `baccept {ctx.author.mention}` ƒë·ªÉ ƒë·ªìng √Ω.",
        color=discord.Color.light_grey()
    )
    embed.set_image(url=DEFAULT_IMAGE_LINKS["propose_gif"])
    embed.set_footer(text=f"Ng∆∞·ªùi c·∫ßu h√¥n ƒë√£ chu·∫©n b·ªã nh·∫´n {RING_SHOP.get(author_data['ring'])['name']}!")
    
    await ctx.send(member_target.mention, embed=embed)


@bot.command(name="accept", aliases=["Accept"]) 
async def accept_cmd(ctx, proposer: str = None):
    # Logic c≈©
    member_proposer = await get_member(ctx, proposer)
    if not member_proposer: return await ctx.send("‚ùå Ng∆∞·ªùi d√πng c·∫ßu h√¥n kh√¥ng h·ª£p l·ªá.")

    proposer_data = get_user(member_proposer.id)
    target_data = get_user(ctx.author.id)
    
    if target_data["married_to"]: return await ctx.send("‚ùå B·∫°n ƒë√£ k·∫øt h√¥n r·ªìi.")
    if proposer_data["married_to"]: return await ctx.send("‚ùå Ng∆∞·ªùi n√†y ƒë√£ k·∫øt h√¥n v·ªõi ng∆∞·ªùi kh√°c.")
    if proposer_data["ring"] is None: return await ctx.send("‚ùå Ng∆∞·ªùi n√†y ch∆∞a mua nh·∫´n.")
    
    if target_data["balance"] < MARRIAGE_FEE: 
        return await ctx.send(f"‚ùå **{ctx.author.display_name}** c·∫ßn **{MARRIAGE_FEE:,} xu** ph√≠ k·∫øt h√¥n.")

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i
    target_data["married_to"] = member_proposer.id
    proposer_data["married_to"] = ctx.author.id
    update_balance(ctx.author.id, -MARRIAGE_FEE)
    save_data(users)
    
    embed = discord.Embed(
        title="üíç K·∫æT H√îN TH√ÄNH C√îNG!",
        description=f"üéâ **{member_proposer.display_name}** v√† **{ctx.author.display_name}** ƒë√£ ch√≠nh th·ª©c v·ªÅ chung m·ªôt nh√†! Ch√∫c m·ª´ng h·∫°nh ph√∫c!",
        color=discord.Color.purple()
    )
    embed.set_image(url=DEFAULT_IMAGE_LINKS["accept_gif"])
    await ctx.send(f"{member_proposer.mention} {ctx.author.mention}", embed=embed)


@bot.command(name="divorce", aliases=["Divorce"]) 
async def divorce_cmd(ctx):
    # Logic c≈©
    user = get_user(ctx.author.id)
    spouse_id = user["married_to"]
    
    if not spouse_id: return await ctx.send("‚ùå B·∫°n ch∆∞a k·∫øt h√¥n.")
    
    spouse = await get_member(ctx, str(spouse_id))
    if not spouse: return await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi b·∫°n ƒë·ªùi c·ªßa b·∫°n.")

    # X√≥a tr·∫°ng th√°i k·∫øt h√¥n c·ªßa c·∫£ hai
    user["married_to"] = None
    spouse_data = get_user(spouse_id)
    if spouse_data:
        spouse_data["married_to"] = None
        
    save_data(users)
    await ctx.send(f"üíî **{ctx.author.display_name}** v√† **{spouse.display_name}** ƒë√£ ly h√¥n. H·∫πn g·∫∑p l·∫°i ki·∫øp sau.")


@bot.command(name="wife", aliases=["husband", "spouse", "Wife", "Husband", "Spouse"]) 
async def check_spouse_cmd(ctx):
    # Logic c≈©
    user = get_user(ctx.author.id)
    spouse_id = user["married_to"]
    
    if not spouse_id: return await ctx.send("‚ùå B·∫°n ch∆∞a k·∫øt h√¥n.")
    
    spouse = await get_member(ctx, str(spouse_id))
    if spouse:
        await ctx.send(f"‚ù§Ô∏è Ng∆∞·ªùi b·∫°n ƒë·ªùi hi·ªán t·∫°i c·ªßa **{ctx.author.display_name}** l√† **{spouse.display_name}**.")
    else:
        await ctx.send("‚ö†Ô∏è B·∫°n ƒë√£ k·∫øt h√¥n, nh∆∞ng kh√¥ng t√¨m th·∫•y ng∆∞·ªùi b·∫°n ƒë·ªùi ƒë√≥ trong server n√†y n·ªØa.")
      # ====================================================================
# PH·∫¶N 7: L·ªÜNH T√ôY CH·ªàNH (CUSTOMIZATION)
# ====================================================================

# H√†m ki·ªÉm tra URL c∆° b·∫£n
def is_valid_url(url):
    return url.startswith("http") and ("." in url)

@bot.command(name="setbg", aliases=["setgif", "customize", "Setbg", "Setgif", "Customize"])
async def set_custom_image_cmd(ctx, type_to_set: str = None, link: str = None):
    """ƒê·∫∑t URL ·∫£nh n·ªÅn (profile) ho·∫∑c GIF t√πy ch·ªânh (t∆∞∆°ng t√°c)."""
    if type_to_set is None or link is None:
        return await ctx.send("‚ùå C√∫ ph√°p: `bsetbg bg <URL_·∫£nh>` ho·∫∑c `bsetbg gif <URL_gif>`")

    user = get_user(ctx.author.id)
    type_to_set = type_to_set.lower()

    if not is_valid_url(link):
        return await ctx.send("‚ùå URL kh√¥ng h·ª£p l·ªá.")

    if type_to_set == "bg":
        user["custom_bg"] = link
        res = f"‚úÖ ƒê√£ ƒë·∫∑t ·∫£nh n·ªÅn (Background) Profile t√πy ch·ªânh th√†nh c√¥ng!"
    elif type_to_set == "gif":
        user["custom_gif"] = link
        res = f"‚úÖ ƒê√£ ƒë·∫∑t GIF t∆∞∆°ng t√°c (Social GIF) t√πy ch·ªânh th√†nh c√¥ng!"
    else:
        return await ctx.send("‚ùå Lo·∫°i t√πy ch·ªânh kh√¥ng h·ª£p l·ªá. Ch·ªçn `bg` (Background) ho·∫∑c `gif` (Social GIF).")

    save_data(users)
    await ctx.send(res)


@bot.command(name="profile", aliases=["p", "info", "Profile", "P", "Info"])
async def profile_cmd(ctx, target: str = None):
    """Hi·ªÉn th·ªã th√¥ng tin Profile v√† Stats c·ªßa ng∆∞·ªùi d√πng."""
    member = ctx.author
    if target:
        member = await get_member(ctx, target)
        if not member:
            return await ctx.send("‚ùå Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.")
            
    user_data = get_user(member.id)
    
    # 1. L·∫•y BG t√πy ch·ªânh ho·∫∑c BG m·∫∑c ƒë·ªãnh
    profile_bg_url = user_data.get("custom_bg") or DEFAULT_IMAGE_LINKS["profile_bg"]
    
    profile_embed = discord.Embed(
        title=f"üå∏ Profile Anime c·ªßa {member.display_name}",
        color=discord.Color.magenta()
    )
    profile_embed.set_thumbnail(url=member.display_avatar.url)
    
    # 2. Th√¥ng tin c∆° b·∫£n
    info_text = f"üí∞ **S·ªë d∆∞:** {user_data.get('balance', 0):,} xu\n"
    
    # 3. Th√¥ng tin H√¥n nh√¢n
    spouse_id = user_data.get("married_to")
    if spouse_id:
        spouse = await get_member(ctx, str(spouse_id))
        spouse_name = spouse.display_name if spouse else "Kh√¥ng c√≤n trong server"
        info_text += f"‚ù§Ô∏è **K·∫øt h√¥n v·ªõi:** {spouse_name}"
        ring_id = user_data.get("ring")
        if ring_id:
            info_text += f" ({RING_SHOP.get(ring_id, {}).get('name', 'Nh·∫´n b√≠ ·∫©n')})"
    else:
        info_text += f"üíî **T√¨nh tr·∫°ng:** ƒê·ªôc th√¢n"
        
    profile_embed.add_field(name="‚ú® Th√¥ng tin C∆° B·∫£n", value=info_text, inline=False)
    
    # 4. Th√¥ng tin Game
    game_text = f"üêæ **T·ªïng s·ªë Pet:** {len(user_data.get('pets', []))}\n"
    game_text += f"üé´ **L∆∞·ª£t Boss c√≤n:** {user_data.get('boss_runs', 0)}\n"
    
    profile_embed.add_field(name="üïπÔ∏è Th√¥ng tin Game", value=game_text, inline=False)

    # ƒê·∫∑t ·∫£nh BG t√πy ch·ªânh
    profile_embed.set_image(url=profile_bg_url)
    
    await ctx.send(embed=profile_embed)
  # ... (C√°c l·ªánh Admin ·ªü tr√™n gi·ªØ nguy√™n) ...
# @bot.command(name="deladmin", aliases=["removeadmin", "Deladmin", "Removeadmin"]) ... (gi·ªØ nguy√™n)
# @bot.command(name="help", aliases=["commands", "hlep", "Help", "Commands"]) ... (gi·ªØ nguy√™n)

# ====================================================================
# L·ªÜNH PH√ÅT NH·∫†C M·ªöI (PLAY)
# ====================================================================

@bot.command(name="play", aliases=["p", "bplay", "btts", "Play", "P", "Bplay", "Btts"])
async def play_cmd(ctx, *, source: str = None):
    """
    Ph√°t file √¢m thanh t·ª´ URL ho·∫∑c chuy·ªÉn Text sang Speech (TTS).
    C√∫ ph√°p: bplay <URL> ho·∫∑c bplay <VƒÉn b·∫£n>
    """
    if source is None:
        return await ctx.send("‚ùå C√∫ ph√°p: `bplay <URL file √¢m thanh>` ho·∫∑c `bplay <vƒÉn b·∫£n TTS>`.")

    if not ctx.author.voice or not ctx.author.voice.channel:
        return await ctx.send("‚ùå B·∫°n ph·∫£i tham gia v√†o k√™nh tho·∫°i (Voice Channel) ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")

    channel = ctx.author.voice.channel
    vc = ctx.voice_client

    # 1. K·∫øt n·ªëi ho·∫∑c Di chuy·ªÉn ƒë·∫øn k√™nh tho·∫°i
    if vc is None:
        vc = await channel.connect()
    elif vc.channel != channel:
        await vc.move_to(channel)
    
    # D·ª´ng nh·∫°c c≈© n·∫øu ƒëang ph√°t
    if vc.is_playing():
        vc.stop()
        await asyncio.sleep(0.5)

    try:
        if is_valid_url(source) and (source.endswith(('.mp3', '.mp4', '.ogg', '.wav')) or "youtube" in source or "youtu.be" in source):
            # --- PH√ÅT NH·∫†C T·ª™ URL (S·ª≠ d·ª•ng youtube-dl/yt-dlp qua FFmpeg) ---
            
            # C·∫•u h√¨nh FFmpeg (D√πng ytdl ƒë·ªÉ x·ª≠ l√Ω link tr·ª±c ti·∫øp)
            FFMPEG_OPTIONS = {
                'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
                'options': '-vn'
            }
            
            # S·ª≠ d·ª•ng ytdl ƒë·ªÉ l·∫•y stream URL ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t
            try:
                # N·∫øu b·∫°n ƒë√£ c√†i ƒë·∫∑t yt-dlp v√† discord.py[voice] ƒë·∫ßy ƒë·ªß
                # Tuy nhi√™n, ƒë·ªÉ ƒë∆°n gi·∫£n, t√¥i s·∫Ω d√πng tr·ª±c ti·∫øp URL n·∫øu l√† file MP3/MP4.
                
                # C·∫£nh b√°o: Discord.py ch·ªâ h·ªó tr·ª£ file stream tr·ª±c ti·∫øp.
                # Ph√°t URL tr·ª±c ti·∫øp:
                vc.play(discord.FFmpegPCMAudio(source, **FFMPEG_OPTIONS), 
                        after=lambda e: print('Done playing URL', e))
                
                await ctx.send(f"üé∂ ƒê√£ b·∫Øt ƒë·∫ßu ph√°t nh·∫°c t·ª´ URL: **{source}**")
                
            except Exception as e:
                return await ctx.send(f"‚ùå L·ªói khi ph√°t t·ª´ URL (FFmpeg): {e}")
            
        else:
            # --- CHUY·ªÇN TEXT SANG SPEECH (TTS) ---
            tts = gTTS(source, lang='vi')
            filename = f"tts_{ctx.author.id}.mp3"
            tts.save(filename)

            vc.play(discord.FFmpegPCMAudio(filename), after=lambda e: print('Done playing TTS', e))
            await ctx.send(f"üó£Ô∏è ƒê√£ ph√°t TTS: **{source}**")

            # Ch·ªù ph√°t xong v√† x√≥a file
            while vc.is_playing():
                await asyncio.sleep(1)
            os.remove(filename)
            
        # Ch·ªù ph√°t xong n·∫øu l√† URL (gi·ªØ k·∫øt n·ªëi)
        if is_valid_url(source):
            await asyncio.sleep(1) # Ch·ªù 1 gi√¢y tr∆∞·ªõc khi ng·∫Øt n·∫øu kh√¥ng c√≥ loop/queue
            # N·∫øu mu·ªën bot kh√¥ng ng·∫Øt ngay:
            # await asyncio.sleep(60) # Gi·ªØ k·∫øt n·ªëi trong 1 ph√∫t sau khi ph√°t xong
            
        # Lu√¥n ng·∫Øt k·∫øt n·ªëi sau khi ph√°t xong (ƒë·ªÉ tr√°nh bot b·ªã treo trong k√™nh tho·∫°i)
        await vc.disconnect()
        
    except Exception as e:
        if vc and vc.is_connected():
            await vc.disconnect()
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ph√°t: {e}")
        
        # X√≥a file TTS n·∫øu c√≥ l·ªói
        tts_filename = f"tts_{ctx.author.id}.mp3"
        if os.path.exists(tts_filename):
            os.remove(tts_filename)
            

@bot.command(name="stop", aliases=["leave", "disconnect", "Stop", "Leave", "Disconnect"])
async def stop_cmd(ctx):
    """D·ª´ng ph√°t nh·∫°c v√† ng·∫Øt k·∫øt n·ªëi bot kh·ªèi k√™nh tho·∫°i."""
    vc = ctx.voice_client
    if vc and vc.is_connected():
        if vc.is_playing():
            vc.stop()
        await vc.disconnect()
        await ctx.send("üõë ƒê√£ d·ª´ng ph√°t nh·∫°c v√† ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tho·∫°i.")
    else:
        await ctx.send("‚ùå Bot hi·ªán kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o.")
      # ====================================================================
# PH·∫¶N 9: L·ªÜNH ANIME/MEDIA (T·ª´ Railway)
# ====================================================================

@bot.command(name="animelist", aliases=["al", "Animelist", "Al"])
async def animelist_cmd(ctx):
    """Hi·ªÉn th·ªã danh s√°ch Anime ƒë∆∞·ª£c c·∫•u h√¨nh qua Railway."""
    global anime_list
    
    if not anime_list:
        return await ctx.send("‚ùå Danh s√°ch Anime tr·ªëng. Vui l√≤ng c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng `ANIME_LIST_CONFIG` tr√™n Railway.")
        
    embed = discord.Embed(
        title="üé¨ Danh S√°ch Anime (C·∫•u h√¨nh t·ª´ Railway)",
        color=discord.Color.purple()
    )
    
    display_list = anime_list[:5] if len(anime_list) > 5 else anime_list
    
    for anime in display_list:
        title = anime.get("title", "Kh√¥ng r√µ t√™n")
        genre = anime.get("genre", "Kh√¥ng r√µ th·ªÉ lo·∫°i")
        rating = anime.get("rating", "N/A")
        
        embed.add_field(
            name=f"[{anime.get('id', 'N/A')}] {title}",
            value=f"**Th·ªÉ lo·∫°i:** {genre}\n**Rating:** {rating}/10",
            inline=True
        )
        
    if len(anime_list) > 5:
        embed.set_footer(text=f"V√† {len(anime_list) - 5} anime kh√°c... | T·ªïng c·ªông: {len(anime_list)}.")
        
    first_anime_url = anime_list[0].get("image_url")
    if first_anime_url:
        embed.set_thumbnail(url=first_anime_url)
        
    await ctx.send(embed=embed)
  # ====================================================================
# PH·∫¶N 10: START BOT
# ====================================================================

@bot.event
async def on_ready():
    load_data()
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Bot ƒë√£ s·∫µn s√†ng: {bot.user.name}")
    print("--------------------------------------------------")

if __name__ == '__main__':
    # Ki·ªÉm tra Token t·ª´ Bi·∫øn m√¥i tr∆∞·ªùng
    if DISCORD_TOKEN == "YOUR_DISCORD_TOKEN_HERE":
        print("L·ªñI: Vui l√≤ng thay th·∫ø DISCORD_TOKEN trong code ho·∫∑c thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng DISCORD_TOKEN.")
    else:
        bot.run(DISCORD_TOKEN)
      
